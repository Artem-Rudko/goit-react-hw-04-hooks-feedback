{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","className","map","option","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","Math","round","Section","title","children","App","useState","goodFeedback","setGoodFeedback","neutralFeedback","setNeutralFeedback","badFeedback","setBadFeedback","event","target","dataset","prevstate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAwBeA,EArBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACpB,qBAAKC,UAAU,mBAAf,SACKF,EAAQG,KAAI,SAAAC,GAAM,OACf,wBAEIC,KAAK,SACLH,UAAWE,EACX,YAAWA,EACXE,QAASL,EALb,SAOKG,GANIA,SCwBNG,EA7BI,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,IAC3BC,EAAQH,EAAOC,EAAUC,EACzBE,EAAqBC,KAAKC,MACpB,IAAPN,GAAeA,EAAOC,EAAUC,IAGrC,OACI,qBAAKR,UAAU,aAAf,SACe,IAAVS,EACG,qCACI,uCAAUH,KACV,0CAAaC,EAAb,OACA,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WAGJ,wDCJDG,G,MAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACZ,sBAAKf,UAAU,UAAf,UACI,6BAAKc,IACJC,OCDM,SAASC,IACpB,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA8CF,mBAAS,GAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAAsCJ,mBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAyBA,OACI,sBAAKvB,UAAU,MAAf,UACI,cAAC,EAAD,CAASc,MAAM,wBAAf,SACI,cAAC,EAAD,CACIhB,QANA,CAAC,OAAQ,UAAW,OAOpBC,gBA5BY,SAAAyB,GAGxB,OAFiBA,EAAMC,OAAOC,QAAtBvB,MAGJ,IAAK,OACDgB,GAAgB,SAAAQ,GAAS,OAAIA,EAAY,KACzC,MAEJ,IAAK,UACDN,GAAmB,SAAAM,GAAS,OAAIA,EAAY,KAC5C,MAEJ,IAAK,MACDJ,GAAe,SAAAI,GAAS,OAAIA,EAAY,KACxC,MAEJ,QACI,aAcJ,cAAC,EAAD,CAASb,MAAM,aAAf,SACI,cAAC,EAAD,CACIR,KAAMY,EACNX,QAASa,EACTZ,IAAKc,SCzCzBM,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACd,EAAD,MAEJe,SAASC,eAAe,U","file":"static/js/main.df95089a.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport './FeedbackOptions.css';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n    <div className=\"feedbackControls\">\n        {options.map(option => (\n            <button\n                key={option}\n                type=\"button\"\n                className={option}\n                data-type={option}\n                onClick={onLeaveFeedback}\n            >\n                {option}\n            </button>\n        ))}\n    </div>\n);\n\nFeedbackOptions.propTypes = {\n    options: PropTypes.array.isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad }) => {\n    const total = good + neutral + bad;\n    const positivePercentage = Math.round(\n        (good * 100) / (good + neutral + bad),\n    );\n\n    return (\n        <div className=\"Statistics\">\n            {total !== 0 ? (\n                <>\n                    <p>Good: {good}</p>\n                    <p>Neutral: {neutral} </p>\n                    <p>Bad: {bad}</p>\n                    <p>Total: {total}</p>\n                    <p>Positive feedback: {positivePercentage} %</p>\n                </>\n            ) : (\n                <p>No feedback is given</p>\n            )}\n        </div>\n    );\n};\n\nStatistics.propTypes = {\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\nimport './Section.css';\n\nconst Section = ({ title, children }) => (\n    <div className=\"Section\">\n        <h1>{title}</h1>\n        {children}\n    </div>\n);\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.any.isRequired,\n};\n\nexport default Section;\n","import { useState } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Section from './components/Section/Section';\n\nexport default function App() {\n    const [goodFeedback, setGoodFeedback] = useState(0);\n    const [neutralFeedback, setNeutralFeedback] = useState(0);\n    const [badFeedback, setBadFeedback] = useState(0);\n\n    const handleFeedbackClick = event => {\n        const { type } = event.target.dataset;\n\n        switch (type) {\n            case 'good':\n                setGoodFeedback(prevstate => prevstate + 1);\n                break;\n\n            case 'neutral':\n                setNeutralFeedback(prevstate => prevstate + 1);\n                break;\n\n            case 'bad':\n                setBadFeedback(prevstate => prevstate + 1);\n                break;\n\n            default:\n                return;\n        }\n    };\n\n    const options = ['good', 'neutral', 'bad'];\n\n    return (\n        <div className=\"App\">\n            <Section title=\"Please leave feedback\">\n                <FeedbackOptions\n                    options={options}\n                    onLeaveFeedback={handleFeedbackClick}\n                />\n            </Section>\n            <Section title=\"Statistics\">\n                <Statistics\n                    good={goodFeedback}\n                    neutral={neutralFeedback}\n                    bad={badFeedback}\n                />\n            </Section>\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}